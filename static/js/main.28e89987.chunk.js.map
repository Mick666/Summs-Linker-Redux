{"version":3,"sources":["components/Sidebar.js","components/Input.js","components/Output.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","buttonContainer","display","buttonSpacing","marginTop","headerSpacing","marginBottom","paddingLeft","textAlign","buttonAlignment","alignItems","Sidebar","clearAll","undoClear","linkText","options","setOptions","classes","Container","Typography","variant","className","FormControl","formControl","InputLabel","Select","value","summaryType","onChange","event","target","MenuItem","FormControlLabel","control","Checkbox","boldCheck","color","label","italicCheck","linkTheCheck","Button","onClick","Input","handleChange","textInput","TextareaAutosize","rows","cols","e","outputContainer","wordWrap","maxWidth","Output","outputData","console","log","map","summ","i","Box","whiteSpace","x","drawerWidth","theme","root","appBar","width","marginLeft","drawer","flexShrink","drawerPaper","toolbar","mixins","content","flexGrow","padding","spacing","parentGrid","gridTemplateColumns","gridTemplateRows","linkedOutput","App","useState","setTextInput","setOutput","prevState","setPrevState","appendLinks","link","text","para","push","Link","href","trim","appendText","links","textComb","split","platformCheck","match","slice","index","AppBar","position","Toolbar","noWrap","Drawer","paper","anchor","strippedInput","filter","replace","length","startsWith","summs","combinedParas","j","textMatch","textSplit","separators","checked","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","createMuiTheme","palette","type","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.28e89987.chunk.js","sourcesContent":["import React from 'react'\nimport { Container, Typography, Button, Checkbox, FormControlLabel,\n    FormControl, InputLabel, Select, MenuItem } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles(() => ({\n    buttonContainer: {\n        display: 'grid',\n    },\n    buttonSpacing: {\n        marginTop: '10px'\n    },\n    headerSpacing: {\n        marginTop: '25px',\n        marginBottom: '25px',\n        paddingLeft: '20px',\n        textAlign: 'left'\n    },\n    buttonAlignment: {\n        marginTop: '10px',\n        alignItems: 'flex-start',\n        display: 'flex',\n        paddingLeft: '0px'\n    }\n}))\n\nconst Sidebar = ({ clearAll, undoClear, linkText,\n    options, setOptions }) => {\n\n    const classes = useStyles()\n    return (\n        <Container>\n            <Typography variant='h4' className={classes.headerSpacing}>Options</Typography>\n            <Container className={classes.buttonContainer}>\n                <FormControl className={classes.formControl}>\n                    <InputLabel>Summary Type</InputLabel>\n                    <Select\n                        value={options.summaryType}\n                        onChange={(event) => setOptions({ ...options, summaryType: event.target.value })}\n                    >\n                        <MenuItem value='Standard'>Standard summary</MenuItem>\n                        <MenuItem value='Industry'>Industry summary</MenuItem>\n                        <MenuItem value='Coles'>Coles style summary</MenuItem>\n                    </Select>\n                </FormControl>\n                <FormControlLabel\n                    control={\n                        <Checkbox\n                            onChange={() => setOptions({ ...options, boldCheck: !options.boldCheck })}\n                            color='primary'\n                        />\n                    }\n                    label='Bold'\n                />\n                <FormControlLabel\n                    control={\n                        <Checkbox\n                            onChange={() => setOptions({ ...options, boldCheck: !options.italicCheck })}\n                            color='primary'\n                        />\n                    }\n                    label='Italic'\n                />\n                <FormControlLabel\n                    control={\n                        <Checkbox\n                            onChange={() => setOptions({ ...options, boldCheck: !options.linkTheCheck })}\n                            color='primary'\n                        />\n                    }\n                    label={'Link \\'The\\''}\n                />\n                <Container className={classes.buttonAlignment}>\n                    <Button variant=\"contained\" onClick={linkText}>Link</Button>\n                </Container>\n                <Container className={classes.buttonAlignment}>\n                    <Button variant=\"contained\" onClick={clearAll}>Clear</Button>\n                </Container>\n                <Container className={classes.buttonAlignment}>\n                    <Button variant=\"contained\" onClick={undoClear}>Undo</Button>\n                </Container>\n            </Container>\n        </Container >\n    )\n}\n\nexport default Sidebar","import React from 'react'\nimport { Typography, TextareaAutosize } from '@material-ui/core'\n\nconst Input = ({ handleChange, textInput }) => {\n    return (\n        <div>\n            <Typography variant='h4'>Text and Links</Typography>\n            <TextareaAutosize\n                rows='25'\n                cols='60'\n                value={textInput}\n                onChange={(e) => handleChange(e.target.value) }\n            />\n        </div>\n    )\n}\n\nexport default Input","import React from 'react'\nimport { Container, Box, Typography } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles(() => ({\n    outputContainer: {\n        display: 'inline-block',\n        textAlign: 'left',\n        wordWrap: 'break-word',\n        maxWidth: '1500px'\n    }\n}))\n\nconst Output = ({ outputData }) => {\n    console.log(outputData)\n    const classes = useStyles()\n    if (!outputData) return (\n        <div></div>\n    )\n    return (\n        <Container className={classes.outputContainer}>\n            <Typography variant='h4'>Linked text</Typography>\n            {outputData.map((summ, i) => {\n                return (<Box key={i} whiteSpace=\"normal\">\n                    {summ.map(x => x)}\n                </Box>\n                )\n            })}\n        </Container>\n    )\n}\n\nexport default Output","import React, { useState } from 'react'\nimport './App.css'\nimport { Drawer, AppBar, Toolbar, Typography, Container, Link } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Sidebar from './components/Sidebar'\nimport Input from './components/Input'\nimport Output from './components/Output'\n\nconst drawerWidth = 240\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n        textAlign: 'center',\n        maxWidth: '1500px'\n    },\n    appBar: {\n        width: `calc(100% - ${drawerWidth}px)`,\n        marginLeft: drawerWidth,\n    },\n    drawer: {\n        width: drawerWidth,\n        flexShrink: 0,\n    },\n    drawerPaper: {\n        width: drawerWidth,\n    },\n    toolbar: theme.mixins.toolbar,\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing(3),\n        width: '75vh'\n    },\n    parentGrid: {\n        display: 'grid',\n        gridTemplateColumns: 'auto 10vh auto',\n        gridTemplateRows: 'auto'\n    },\n    linkedOutput: {\n        display: 'inline-block',\n        textAlign: 'left'\n    }\n}))\n\nfunction App() {\n    const classes = useStyles()\n    const [textInput, setTextInput] = useState('')\n    const [linkedOutput, setOutput] = useState(null)\n    const [prevState, setPrevState] = useState(null)\n    const [options, setOptions] = useState({\n        summaryType: 'Standard',\n        boldCheck: false,\n        italicCheck: false,\n        linkTheCheck: false\n    })\n\n    const clearAll = () => {\n        setPrevState(linkedOutput)\n        setOutput(null)\n\n    }\n\n    const undoClear = () => {\n        setOutput(prevState)\n    }\n\n    function linkText() {\n        clearAll()\n        let strippedInput = textInput\n            .split('\\n')\n            .filter(x => x.replace(/\\n| /g, '').length > 0)\n\n        let links = strippedInput.filter(x => x.startsWith('http'))\n        let summs = strippedInput.filter(x => !x.startsWith('http') && x.length > 10)\n        let combinedParas = []\n        console.log(links, summs)\n\n        for (let i = 0, j = 0; i < summs.length && j < links.length; i++) {\n            let text = summs[i].replace(/–/g, '-')\n            let para = []\n            let links = []\n            if (options.summaryType === 'Standard') {\n                if (!options.linkTheCheck && text.startsWith('The')) {\n                    text = text.slice(4)\n                    links.push(\n                        <Typography className={classes.linkedOutput}>\n                        The&nbsp;\n                        </Typography>)\n                }\n\n                if (!text.match(/^.*?(?= report)|(?= reports)/)) {\n                    continue\n                }\n                let textMatch = text.match(/^.*?(?= report)|(?= reports)/)[0]\n                let textSplit = textMatch.split(/ and |, /)\n                if (textSplit.length > 1) {\n                    let separators = textMatch.match(/,(?:[^,])| and /g)\n                    for (let x = 0; x < textSplit.length; x++, j++) {\n                        appendLinks(links[j], textSplit[x], links)\n                        if (separators[x]) {\n                            if (options.platformCheck) separators[x] = separators[x].trim()\n                            links.push(<Typography className={classes.linkedOutput}>{separators[x]}</Typography>)\n                        }\n                    }\n                } else {\n                    appendLinks(links[j], textMatch, links)\n                    j++\n                }\n                appendText(text, para, links)\n                para.push(<br />)\n                combinedParas.push(para)\n            } else if (options.summaryType === 'Industry') {\n                appendText(text, para)\n                if (!text.match(/( - )(.*)$/)) continue\n                appendLinks(links[j], text.match(/( - )(.*)$/)[2], para)\n                para.push(<br />)\n                combinedParas.push(para)\n                j++\n            } else if (options.summaryType === 'Coles') {\n                if (!text.match(/( - )(.*)$/)) continue\n                let textMatch = text.match(/( - )(.*)$/)[2]\n                let textSplit = textMatch.split(/ and |, /)\n                appendText(text, para)\n                if (textSplit.length > 1) {\n                    let separators = textMatch.match(/,(?:[^,])| and /g)\n                    for (let x = 0; x < textSplit.length; x++, j++) {\n                        appendLinks(links[j], textSplit[x], para)\n                        if (separators[x]) {\n                            if (options.platformCheck.checked) separators[x] = separators[x].trim()\n                            para.push(<Typography className={classes.linkedOutput}>{separators[x]}</Typography>)\n                        }\n                    }\n                } else {\n                    appendLinks(links[j], textMatch, para)\n                    j++\n                }\n                para.push(<br />)\n                combinedParas.push(para)\n            }\n        }\n        setOutput(combinedParas)\n    }\n\n\n    function appendLinks(link, text, para) {\n        if (options.boldCheck) {\n            para.push(\n                <b>\n                    <Link href={link} className={classes.linkedOutput}>{text}</Link>\n                </b>)\n        } else if (options.italicCheck) {\n            para.push(\n                <i>\n                    <Link href={link} className={classes.linkedOutput}>{text}</Link>\n                </i>)\n        } else {\n            para.push(<Link href={link} className={classes.linkedOutput}>{text.trim()}</Link>)\n        }\n    }\n\n    function appendText(text, para, links) {\n        let textComb\n        if (options.summaryType === 'Standard' || options.summaryType === '') {\n            textComb = text.split(/^.*?(?= report)|(?= reports)/)[1]\n            if (options.platformCheck) textComb = textComb.trim()\n            para.push(\n                <Typography className={classes.linkedOutput}>\n                    {links}{' '}{textComb}\n                </Typography>)\n        } else if (options.summaryType === 'Industry' || options.summaryType === 'Coles') {\n            var match = text.match(/( - )(.*)$/)\n            if (!match) return\n            textComb = text.slice(0, match.index + 3)\n            if (options.platformCheck && options.summaryType === 'Industry') textComb = textComb.trim()\n            para.push(<Typography className={classes.linkedOutput}>{textComb}</Typography>)\n        }\n    }\n\n    return (\n        <Container className={classes.root}>\n            <AppBar position=\"fixed\" className={classes.appBar}>\n                <Toolbar>\n                    <Typography variant=\"h6\" noWrap>\n                        Summaries Linker\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <Drawer\n                className={classes.drawer}\n                variant=\"permanent\"\n                classes={{\n                    paper: classes.drawerPaper,\n                }}\n                anchor=\"left\"\n            >\n                <div className={classes.toolbar} />\n                <Sidebar\n                    clearAll={clearAll}\n                    undoClear={undoClear}\n                    linkText={linkText}\n                    options={options}\n                    setOptions={setOptions}\n                />\n            </Drawer>\n            <main className={classes.content}>\n                <div className={classes.toolbar} />\n                <Container className={classes.parentGrid}>\n                    <Input\n                        handleChange={setTextInput}\n                        textInput={textInput}\n                    />\n                    <div></div>\n                    <Output outputData={linkedOutput} />\n                </Container>\n            </main>\n        </Container>\n    )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport { createMuiTheme, ThemeProvider, CssBaseline } from '@material-ui/core'\n\nconst theme = createMuiTheme({\n    palette: {\n        type: 'dark'\n    }\n})\n\nReactDOM.render(\n    <React.StrictMode>\n        <ThemeProvider theme={theme}>\n            <CssBaseline />\n            <App />\n        </ThemeProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}